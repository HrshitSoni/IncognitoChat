@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>
<button @onclick ="Send" disabled ="@(IsConnected == false)">Send</button>

<hr/>

<ul>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code{
    private HubConnection? hubConnection;
    private List<string>messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync(){
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, string,TimeSpan>("RecieveMessage",(user,message,timeSpan) =>
        {
            var formattedMessage = $"{user}: {message}:{timeSpan}";
            messages.Add(formattedMessage);

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send(){
        if(hubConnection is not null)
        {
            var indianTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
            var timeString = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, indianTimeZone).ToString("HH:mm:ss");
            await hubConnection.SendAsync("SendMessage", userInput, messageInput,timeString);
        }
    }

    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


}